##
1、秒杀接口地址隐藏（作用：秒杀之前，用户是不知道真正的秒杀地址）
    秒杀前，先去请求接口获取秒杀地址，该接口随机生成一个随机数，并存入redis中，并将该随机数返回客户端。
    客户端根据这个随机数组成随机的秒杀路径。这样秒啥时候先校验该随机数是否在redis中，不存在时候就认为是无效请求。


2、数学公式验证码
    作用：防刷/分散用户请求
    验证完成后删除结果

3、接口限流防刷
    使用Redis,在获取path之前，先验证用户已经访问多少次。
    改进，使用注解+拦截器

    注解+拦截器使用：
    首先创建注解类型
    创建一个拦截器类，需要实现HandlerInterceptor接口，然后实现其中的方法；
    创建一个配置类，该类需要继承WebMvcConfigurerAdapter，并且需要加上@Configuration注解,并实现以下方法；
     public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(accessLimitInterceptor);
     }


整体优化过程：
    客户端在秒杀之前，需要获取真正的路径（秒杀地址），在获取
    路径时候，先校验该用户该路径访问次数是否在允许范围内（拦截器阶段）
    ，然后校验用户验证码是否正确。最后返回用户的访问地址变量。
    这个变量会保存在redis，之后访问秒杀接口，会校验该路径是否有效。